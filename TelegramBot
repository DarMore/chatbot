package ru.yournick.projects.jokebot.bot;

import ru.yournick.projects.jokebot.model.Joke;
import ru.yournick.projects.jokebot.service.JokeService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.List;
import java.util.Random;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    private final JokeService jokeService;

    @Value("${telegram.bot.token}")
    private String botToken;

    @Value("${telegram.bot.username}")
    private String botUsername;

    public TelegramBot(JokeService jokeService) {
        this.jokeService = jokeService;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            if (messageText.equals("/joke")) {
                Joke joke = getRandomJoke();
                sendMessage(chatId, joke != null ? joke.getText() : "Нет шуток.");
            }
        }
    }

    private Joke getRandomJoke() {
        List<Joke> jokes = jokeService.getAllJokes();
        if (!jokes.isEmpty()) {
            return jokes.get(new Random().nextInt(jokes.size()));
        }
        return null;
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }
}
